Paper Code: dh_23_P_23

[Background]: Thanks to easy-to-use data analysis tools and digital infrastructures, even those humanities scholars who lack programming skills can work with large-scale empirical datasets in order to disclose patterns and correlations within them. Although empirical research trends have existed throughout the history of the humanities [Bod 2013], these recently emergent possibilities have revived an empiricist attitude among humanities scholars schooled in more critical and interpretive traditions. Replying to calls for a critical digital humanities [Berry and Fagerjord 2017] [Dobson 2019], this paper explores \"tool criticism\" [Van Es et al. 2018] - a critical attitude required of digital humanities scholars when working with computational tools and digital infrastructures.

[Method]: This paper explores \"tool criticism\" as a response to instrumentalism in the digital humanities and proposes it to be part of what a critical digital humanities does. It also analyses \"tool criticism\" as practice, in practice. Concretely, it discusses two critical making-inspired workshops in which participants explored the affordances of digital tools and infrastructures and their underlying assumptions and values. The first workshop focused on \"games-as-tools\" [Werning 2020]. Participants in the workshop engaged with the constraints, material and mechanical, of a card game by making modifications to it. In the second workshop, drawing on the concept of \"digital infrapuncture\" [Verhoeven 2016], participants examined digital infrastructure in terms of capacity and care. After first identifying \"hurt\" in a chat environment, they then designed bots to intervene in that hurt and offer relief.

[Results]: Not explicitly mentioned in the provided text.

[Implications]: Not explicitly mentioned in the provided text.


Paper Code: dh_23_P_62

[Background]: Esoteric programming languages (esolangs) break from the norms of language design by explicitly refusing practicality and clarity.

[Method]: While some esolangs like Unnecessary make code impossible to write, others such as Malboge retain the ability to express functional and reliable code, despite their seemingly chaotic nature.

[Results]: These languages challenge traditional programming culture by affirming contrasting ideals within computational aestheticsâ€”often balancing humbleness with computational idealism.

[Implications]: Understanding this dialogue helps reshape how computer science is taught and practiced, emphasizing both creativity and functionality in programming.

