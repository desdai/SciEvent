{
  "papers": [
    {
      "paper_code": "ACL_23_P_540",
      "abstract": "Reusing off-the-shelf code snippets from online repositories is a common practice, which significantly enhances the productivity of software developers. To find desired code snippets, developers resort to code search engines through natural language queries. Neural code search models are hence behind many such engines. These models are based on deep learning and gain substantial attention due to their impressive performance. However, the security aspect of these models is rarely studied. Particularly, an adversary can inject a backdoor in neural code search models, which return buggy or even vulnerable code with security/privacy issues. This may impact the downstream software (e.g., stock trading systems and autonomous driving) and cause financial loss and/or life-threatening incidents. In this paper, we demonstrate such attacks are feasible and can be quite stealthy. By simply modifying one variable/function name, the attacker can make buggy/vulnerable code rank in the top 11%. Our attack BADCODE features a special trigger generation and injection procedure, making the attack more effective and stealthy. The evaluation is conducted on two neural code search models and the results show our attack outperforms baselines by 60%. Our user study demonstrates that our attack is more stealthy than the baseline by two times based on the F1 score.",
      "events": [
        {
          "Background/Introduction": "",
          "Text": "Reusing off-the-shelf code snippets from online repositories is a common practice, which significantly enhances the productivity of software developers. To find desired code snippets, developers resort to code search engines through natural language queries. Neural code search models are hence behind many such engines. These models are based on deep learning and gain substantial attention due to their impressive performance. However, the security aspect of these models is rarely studied. Particularly, an adversary can inject a backdoor in neural code search models, which return buggy or even vulnerable code with security/privacy issues. This may impact the downstream software (e.g., stock trading systems and autonomous driving) and cause financial loss and/or life-threatening incidents.",
          "Main Action": "An adversary can inject a backdoor",
          "Arguments": {
            "Agent": [
              "An adversary"
            ],
            "Object": {
              "Primary Object": [
                "Neural code search models"
              ],
              "Secondary Object": [
                "Stock trading systems",
                "Autonomous driving"
              ]
            },
            "Context": [
              "Reusing off-the-shelf code snippets from online repositories is a common practice",
              "which significantly enhances the productivity of software developers",
              "To find desired code snippets, developers resort to code search engines through natural language queries",
              "Neural code search models are hence behind many such engines",
              "These models are based on deep learning and gain substantial attention due to their impressive performance",
              "However, the security aspect of these models is rarely studied"
            ],
            "Purpose": [
              "This may impact the downstream software (e.g., stock trading systems and autonomous driving) and cause financial loss and/or life-threatening incidents"
            ],
            "Method": [
              "Backdoor injection into neural code search models"
            ],
            "Results": [
              "Buggy or even vulnerable code with security/privacy issues"
            ],
            "Analysis": [
              "This may impact the downstream software (e.g., stock trading systems and autonomous driving)",
              "and cause financial loss and/or life-threatening incidents"
            ],
            "Challenge": [
              "The security aspect of these models is rarely studied"
            ],
            "Ethical": [
              "security/privacy issues",
              "financial loss",
              "life-threatening incidents"
            ],
            "Implications": [
              "Broader significance",
              "potential for future applications/research",
              "changes in developing and deploying such models"
            ],
            "Contradictions": [
              "Impressive performance vs overlooked security flaws",
              "Known limitations in current research"
            ]
          }
        },
        {
          "Methods/Approach": "",
          "Text": "In this paper, we demonstrate such attacks are feasible and can be quite stealthy. By simply modifying one variable/function name, the attacker can make buggy/vulnerable code rank in the top 11%. Our attack BADCODE features a special trigger generation and injection procedure, making the attack more effective and stealthy.",
          "Main Action": "We demonstrate such attacks are feasible and can be quite stealthy.",
          "Arguments": {
            "Agent": [
              "Researchers or developers testing the system"
            ],
            "Object": {
              "Primary Object": [
                "Buggy/vulnerable code"
              ],
              "Secondary Object": [
                "Attack tool named BADCODE"
              ]
            },
            "Context": [
              "<NONE>"
            ],
            "Purpose": [
              "To show the feasibility and stealthiness of certain attacks"
            ],
            "Method": [
              "Modifying one variable/function name",
              "Special trigger generation and injection procedure"
            ],
            "Results": [
              "By simply modifying one variable/function name, the attacker can make buggy/vulnerable code rank in the top 11%"
            ],
            "Analysis": [
              "This demonstrates the effectiveness of the attack method"
            ],
            "Challenge": [
              "The ability to remain undetected while causing significant issues"
            ],
            "Ethical": [
              "Potential harm to users due to introduced vulnerabilities"
            ],
            "Implications": [
              "Existing security measures may fail against such attacks, necessitating better defense mechanisms"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Results/Findings": "",
          "Text": "The evaluation is conducted on two neural code search models and the results show our attack outperforms baselines by 60%. Our user study demonstrates that our attack is more stealthy than the baseline by two times based on the F1 score.",
          "Main Action": "our attack outperforms baselines by 60%",
          "Arguments": {
            "Agent": [
              "Our team"
            ],
            "Object": {
              "Primary Object": [
                "our attack"
              ],
              "Secondary Object": [
                "baselines"
              ]
            },
            "Context": [
              "<NONE>"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        }
      ]
    },
    {
      "paper_code": "ACL_23_P_835",
      "abstract": "To prevent the costly and inefficient use of resources on low-quality annotations, we want a method for creating a pool of dependable annotators who can effectively complete difficult tasks, such as evaluating automatic summarization. Thus, we investigate the recruitment of high-quality Amazon Mechanical Turk workers via a two-step pipeline. We show that we can successfully filter out subpar workers before they carry out the evaluations and obtain high-agreement annotations with similar constraints on resources. Although our workers demonstrate a strong consensus among themselves and CloudResearch workers, their alignment with expert judgments on a subset of the data is not as expected and needs further training in correctness. This paper still serves as a best practice for the recruitment of qualified annotators in other challenging annotation tasks.",
      "events": [
        {
          "Background/Introduction": "",
          "Text": "To prevent the costly and inefficient use of resources on low-quality annotations, we want a method for creating a pool of dependable annotators who can effectively complete difficult tasks, such as evaluating automatic summarization.",
          "Main Action": "Creating a pool of dependable annotators",
          "Arguments": {
            "Agent": [
              "<NONE>"
            ],
            "Object": {
              "Primary Object": [
                "pool of dependable annotators"
              ],
              "Secondary Object": [
                "<NONE>"
              ]
            },
            "Context": [
              "<NONE>"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Methods/Approach": "",
          "Text": "Thus, we investigate the recruitment of high-quality Amazon Mechanical Turk workers via a two-step pipeline. We show that we can successfully filter out subpar workers before they carry out the evaluations and obtain high-agreement annotations with similar constraints on resources.",
          "Main Action": "investigate",
          "Arguments": {
            "Agent": [
              "we"
            ],
            "Object": {
              "Primary Object": [
                "recruitment of high-quality Amazon Mechanical Turk workers"
              ],
              "Secondary Object": [
                "a two-step pipeline"
              ]
            },
            "Context": [
              "such a pipeline for obtaining high-agreement annotations with similar constraints on resources"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Results/Findings": "",
          "Text": "Although our workers demonstrate a strong consensus among themselves and CloudResearch workers, their alignment with expert judgments on a subset of the data is not as expected and needs further training in correctness.",
          "Main Action": "Their alignment with expert judgments",
          "Arguments": {
            "Agent": [
              "our workers"
            ],
            "Object": {
              "Primary Object": [
                "expert judgments"
              ],
              "Secondary Object": [
                "<NONE>"
              ]
            },
            "Context": [
              "they have demonstrated a strong consensus among themselves and CloudResearch workers"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "further training in correctness"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Conclusions/Implications": "",
          "Text": "This paper still serves as a best practice for the recruitment of qualified annotators in other challenging annotation tasks.",
          "Main Action": "serves",
          "Arguments": {
            "Agent": [
              "This paper"
            ],
            "Object": {
              "Primary Object": [
                "as a best practice"
              ],
              "Secondary Object": [
                "in other challenging annotation tasks"
              ]
            },
            "Context": [
              "annotation tasks",
              "challenging tasks"
            ],
            "Purpose": [
              "to provide guidelines for recruiting qualified annotators"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "This paper still serves as a best practice for the recruitment of qualified annotators in other challenging annotation tasks"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        }
      ]
    }
  ]
}