{
  "papers": [
    {
      "paper_code": "bioinfo_23_P_248",
      "abstract": "Read-overlap-based graph data structures play a central role in computing de novo genome assembly. Most long-read assemblers use Myers's string graph model to sparsify overlap graphs. Graph sparsification improves assembly contiguity by removing spurious and redundant connections. However, a graph model must be coverage-preserving, i.e., it must ensure that there exist walks in the graph that spell all chromosomes, given sufficient sequencing coverage. This property becomes even more important for diploid genomes, polyploid genomes, and metagenomes where there is a risk of losing haplotype-specific information. We develop a novel theoretical framework under which the coverage-preserving properties of a graph model can be analyzed. We first prove that de Bruijn graph and overlap graph models are guaranteed to be coverage-preserving. We next show that the standard string graph model lacks this guarantee. The latter result is consistent with prior work suggesting that removal of contained reads, i.e., the reads that are substrings of other reads, can lead to coverage gaps during string graph construction. Our experiments done using simulated long reads from HG002 human diploid genome show that 50 coverage gaps are introduced on average by ignoring contained reads from nanopore datasets. To remedy this, we propose practical heuristics that are well-supported by our theoretical results and are useful to decide which contained reads should be retained to avoid coverage gaps. Our method retains a small fraction of contained reads (1-2%) and closes majority of the coverage gaps.",
      "events": [
        {
          "Background/Introduction": "",
          "Text": "Read-overlap-based graph data structures play a central role in computing de novo genome assembly. Most long-read assemblers use Myers's string graph model to sparsify overlap graphs. Graph sparsification improves assembly contiguity by removing spurious and redundant connections. However, a graph model must be coverage-preserving, i.e. it must ensure that there exist walks in the graph that spell all chromosomes, given sufficient sequencing coverage. This property becomes even more important for diploid genomes, polyploid genomes, and metagenomes where there is a risk of losing haplotype-specific information.",
          "Main Action": "read-overlap-based graph data structures play a central role",
          "Arguments": {
            "Agent": [
              "Myers's string graph model"
            ],
            "Object": {
              "Primary Object": [
                "read-overlap-based graph data structures"
              ],
              "Secondary Object": [
                "Myers's string graph model"
              ]
            },
            "Context": [
              "Most long-read assemblers use Myers's string graph model to sparsify overlap graphs"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "Graph sparsification improves assembly contiguity by removing spurious and redundant connections"
            ],
            "Analysis": [
              "However, a graph model must be coverage-preserving, i.e. it must ensure that there exist walks in the graph that spell all chromosomes, given sufficient sequencing coverage"
            ],
            "Challenge": [
              "This property becomes even more important for diploid genomes, polyploid genomes, and metagenomes where there is a risk of losing haplotype-specific information"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Methods/Approach": "",
          "Text": "We develop a novel theoretical framework under which the coverage-preserving properties of a graph model can be analyzed. We first prove that de Bruijn graph and overlap graph models are guaranteed to be coverage-preserving. We next show that the standard string graph model lacks this guarantee.",
          "Main Action": "<NONE>",
          "Arguments": {
            "Agent": [
              "<NONE>"
            ],
            "Object": {
              "Primary Object": [
                "<NONE>"
              ],
              "Secondary Object": [
                "<NONE>"
              ]
            },
            "Context": [
              "<NONE>"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Results/Findings": "",
          "Text": "The latter result is consistent with prior work suggesting that removal of contained reads, i.e., the reads that are substrings of other reads, can lead to coverage gaps during string graph construction. Our experiments done using simulated long reads from HG002 human diploid genome show that 50 coverage gaps are introduced on average by ignoring contained reads from nanopore datasets.",
          "Main Action": "leads to coverage gaps",
          "Arguments": {
            "Agent": [
              "removal of contained reads",
              "ignoring contained reads from nanopore datasets"
            ],
            "Object": {
              "Primary Object": [
                "coverage gaps during string graph construction",
                "50 coverage gaps averaged by ignoring contained reads"
              ],
              "Secondary Object": [
                "<NONE>"
              ]
            },
            "Context": [
              "i.e., the reads that are substrings of other reads",
              "simulated long reads from HG002 human diploid genome",
              "average number of coverage gaps created by ignoring contained reads"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "On average, 50 coverage gaps are introduced by ignoring contained reads.",
              "Ignoring contained reads introduces approximately 50% fewer coverage gaps compared to considering them."
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "Understanding the effect of contained reads helps optimize string graph construction algorithms.",
              "Comparisons highlight the trade-offs between computational efficiency and accuracy in genomic assembly."
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Conclusions/Implications": "",
          "Text": "To remedy this, we propose practical heuristics that are well-supported by our theoretical results and are useful to decide which contained reads should be retained to avoid coverage gaps. Our method retains a small fraction of contained reads (1-2%) and closes majority of the coverage gaps.",
          "Main Action": "propose",
          "Arguments": {
            "Agent": [
              "we"
            ],
            "Object": {
              "Primary Object": [
                "practical heuristics"
              ],
              "Secondary Object": [
                "<NONE>"
              ]
            },
            "Context": [
              "To remedy this"
            ],
            "Purpose": [
              "address coverage gaps"
            ],
            "Method": [
              "Our method retains a small fraction of contained reads (1-2%)"
            ],
            "Results": [
              "closes majority of the coverage gaps"
            ],
            "Analysis": [
              "it balances minimising read loss against maximising utility"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        }
      ]
    },
    {
      "paper_code": "bioinfo_23_P_716",
      "abstract": "The Kyoto Encyclopedia of Genes and Genomes (KEGG) database serves as a valuable systems biology resource and is widely utilized in diverse research fields. However, existing software does not allow flexible visualization and network analyses of the vast and complex KEGG data. We developed ggkegg, an R package that integrates KEGG information with ggplot2 and ggraph. ggkegg enables enhanced visualization and network analyses of KEGG data. We demonstrate the utility of the package by providing examples of its application in single-cell, bulk transcriptome, and microbiome analyses. ggkegg may empower researchers to analyze complex biological networks and present their results effectively.",
      "events": [
        {
          "Background/Introduction": "",
          "Text": "The Kyoto Encyclopedia of Genes and Genomes (KEGG) database serves as a valuable systems biology resource and is widely utilized in diverse research fields. However, existing software does not allow flexible visualization and network analyses of the vast and complex KEGG data.",
          "Main Action": "does not allow flexible visualization and network analyses",
          "Arguments": {
            "Agent": [
              "Kyoto Encyclopedia of Genes and Genomes (KEGG) database"
            ],
            "Object": {
              "Primary Object": [
                "extensive research fields"
              ],
              "Secondary Object": [
                "complex KEGG data"
              ]
            },
            "Context": [
              "existing software does not allow flexible visualization and network analyses of the vast and complex KEGG data"
            ],
            "Purpose": [
              "to highlight the gap between existing software capabilities and the needs of comprehensive biological research"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "The inherent complexity makes manual management challenging, prompting calls for automation"
            ],
            "Challenge": [
              "Handling large-scale genomic networks requires sophisticated computational strategies"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "Advances in visualization technologies could lead to breakthroughs across various research domains"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Methods/Approach": "",
          "Text": "We developed ggkegg, an R package that integrates KEGG information with ggplot2 and ggraph. ggkegg enables enhanced visualization and network analyses of KEGG data. We demonstrate the utility of the package by providing examples of its application in single-cell, bulk transcriptome, and microbiome analyses.",
          "Main Action": "developed",
          "Arguments": {
            "Agent": [
              "We"
            ],
            "Object": {
              "Primary Object": [
                "an R package that integrates KEGG information with ggplot2 and ggraph, enabling enhanced visualization and network analyses of KEGG data"
              ],
              "Secondary Object": [
                "<NONE>"
              ]
            },
            "Context": [
              "<NONE>"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Conclusions/Implications": "",
          "Text": "ggkegg may empower researchers to analyze complex biological networks and present their results effectively.",
          "Main Action": "may empower",
          "Arguments": {
            "Agent": [
              "ggKEGG"
            ],
            "Object": {
              "Primary Object": [
                "researchers"
              ],
              "Secondary Object": [
                "analyze complex biological networks"
              ]
            },
            "Context": [
              "<NONE>"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "ggKEGG enables researchers to analyze complex biological networks and present their results effectively"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        }
      ]
    }
  ]
}