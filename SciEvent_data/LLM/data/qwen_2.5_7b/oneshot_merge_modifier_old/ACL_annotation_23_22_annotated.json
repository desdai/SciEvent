{
  "papers": [
    {
      "paper_code": "ACL_23_P_540",
      "abstract": "Reusing off-the-shelf code snippets from online repositories is a common practice, which significantly enhances the productivity of software developers. To find desired code snippets, developers resort to code search engines through natural language queries. Neural code search models are hence behind many such engines. These models are based on deep learning and gain substantial attention due to their impressive performance. However, the security aspect of these models is rarely studied. Particularly, an adversary can inject a backdoor in neural code search models, which return buggy or even vulnerable code with security/privacy issues. This may impact the downstream software (e.g., stock trading systems and autonomous driving) and cause financial loss and/or life-threatening incidents. In this paper, we demonstrate such attacks are feasible and can be quite stealthy. By simply modifying one variable/function name, the attacker can make buggy/vulnerable code rank in the top 11%. Our attack BADCODE features a special trigger generation and injection procedure, making the attack more effective and stealthy. The evaluation is conducted on two neural code search models and the results show our attack outperforms baselines by 60%. Our user study demonstrates that our attack is more stealthy than the baseline by two times based on the F1 score.",
      "events": [
        {
          "Background/Introduction": "",
          "Text": "Reusing off-the-shelf code snippets from online repositories is a common practice, which significantly enhances the productivity of software developers. To find desired code snippets, developers resort to code search engines through natural language queries. Neural code search models are hence behind many such engines. These models are based on deep learning and gain substantial attention due to their impressive performance. However, the security aspect of these models is rarely studied. Particularly, an adversary can inject a backdoor in neural code search models, which return buggy or even vulnerable code with security/privacy issues. This may impact the downstream software (e.g., stock trading systems and autonomous driving) and cause financial loss and/or life-threatening incidents.",
          "Main Action": "enhance",
          "Arguments": {
            "Agent": [
              "downstream software"
            ],
            "Object": {
              "Primary Object": [
                "software (e.g., stock trading systems and autonomous driving)"
              ],
              "Secondary Object": [
                "<NONE>"
              ]
            },
            "Context": [
              "The context includes reusing off-the-shelf code snippets from online repositories, finding desired code snippets via code search engines, and the current lack of studying the security aspects of neural code search models."
            ],
            "Purpose": [
              "To prevent adversaries from injecting backdoors into neural code search models leading to the provision of insecure code."
            ],
            "Method": [
              "injecting a backdoor in neural code search models, returning buggy or vulnerable code with security/privacy issues."
            ],
            "Results": [
              "may impact the downstream software (e.g., stock trading systems and autonomous driving) and cause financial loss and/or life-threatening incidents."
            ],
            "Analysis": [
              "Neural code search models rely heavily on deep learning and have impressive performance, yet their security remains understudied."
            ],
            "Challenge": [
              "Security studies of neural code search models are rare."
            ],
            "Ethical": [
              "Potential risks associated with providing insecure code raise significant ethical concerns regarding data privacy and system reliability."
            ],
            "Implications": [
              "Strengthening the security analysis of neural code search models would lead to safer deployment practices across various critical domains."
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Methods/Approach": "",
          "Text": "In this paper, we demonstrate such attacks are feasible and can be quite stealthy. By simply modifying one variable/function name, the attacker can make buggy/vulnerable code rank in the top 11%. Our attack BADCODE features a special trigger generation and injection procedure, making the attack more effective and stealthy.",
          "Main Action": "can be quite stealthy",
          "Arguments": {
            "Agent": [
              "attacker"
            ],
            "Object": {
              "Primary Object": [
                "buggy/vulnerable code"
              ],
              "Secondary Object": [
                "top 11%"
              ]
            },
            "Context": [
              "such attacks are feasible and can be quite stealthy"
            ],
            "Purpose": [
              "make buggy/vulnerable code rank in the top 11%"
            ],
            "Method": [
              "modifying one variable/function name"
            ],
            "Results": [
              "attack BADCODE features a special trigger generation and injection procedure, making the attack more effective and stealthy"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Results/Findings": "",
          "Text": "The evaluation is conducted on two neural code search models and the results show our attack outperforms baselines by 60%. Our user study demonstrates that our attack is more stealthy than the baseline by two times based on the F1 score.",
          "Main Action": "evaluation is conducted",
          "Arguments": {
            "Agent": [
              "The evaluation"
            ],
            "Object": {
              "Primary Object": [
                "two neural code search models"
              ],
              "Secondary Object": [
                "baselines"
              ]
            },
            "Context": [
              "by 60%"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "our attack outperforms baselines by 60%",
              "our attack is more stealthy than the baseline by two times based on the F1 score"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        }
      ]
    },
    {
      "paper_code": "ACL_23_P_835",
      "abstract": "To prevent the costly and inefficient use of resources on low-quality annotations, we want a method for creating a pool of dependable annotators who can effectively complete difficult tasks, such as evaluating automatic summarization. Thus, we investigate the recruitment of high-quality Amazon Mechanical Turk workers via a two-step pipeline. We show that we can successfully filter out subpar workers before they carry out the evaluations and obtain high-agreement annotations with similar constraints on resources. Although our workers demonstrate a strong consensus among themselves and CloudResearch workers, their alignment with expert judgments on a subset of the data is not as expected and needs further training in correctness. This paper still serves as a best practice for the recruitment of qualified annotators in other challenging annotation tasks.",
      "events": [
        {
          "Background/Introduction": "",
          "Text": "To prevent the costly and inefficient use of resources on low-quality annotations, we want a method for creating a pool of dependable annotators who can effectively complete difficult tasks, such as evaluating automatic summarization.",
          "Main Action": "want",
          "Arguments": {
            "Agent": [
              "we"
            ],
            "Object": {
              "Primary Object": [
                "a method for creating a pool of dependable annotators who can effectively complete difficult tasks"
              ],
              "Secondary Object": [
                "such as evaluating automatic summarization"
              ]
            },
            "Context": [
              "to prevent the costly and inefficient use of resources on low-quality annotations"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Methods/Approach": "",
          "Text": "Thus, we investigate the recruitment of high-quality Amazon Mechanical Turk workers via a two-step pipeline. We show that we can successfully filter out subpar workers before they carry out the evaluations and obtain high-agreement annotations with similar constraints on resources.",
          "Main Action": "investigate",
          "Arguments": {
            "Agent": [
              "we"
            ],
            "Object": {
              "Primary Object": [
                "recruitment of high-quality Amazon Mechanical Turk workers via a two-step pipeline"
              ],
              "Secondary Object": [
                "<NONE>"
              ]
            },
            "Context": [
              "via a two-step pipeline"
            ],
            "Purpose": [
              "filter out subpar workers before they carry out the evaluations and obtain high-agreement annotations with similar constraints on resources"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Results/Findings": "",
          "Text": "Although our workers demonstrate a strong consensus among themselves and CloudResearch workers, their alignment with expert judgments on a subset of the data is not as expected and needs further training in correctness.",
          "Main Action": "needs further training",
          "Arguments": {
            "Agent": [
              "their alignment with expert judgments on a subset of the data"
            ],
            "Object": {
              "Primary Object": [
                "<NONE>"
              ],
              "Secondary Object": [
                "<NONE>"
              ]
            },
            "Context": [
              "on a subset of the data is not as expected and"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "not as expected"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "further training in correctness"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Conclusions/Implications": "",
          "Text": "This paper still serves as a best practice for the recruitment of qualified annotators in other challenging annotation tasks.",
          "Main Action": "serves as",
          "Arguments": {
            "Agent": [
              "this paper"
            ],
            "Object": {
              "Primary Object": [
                "best practice for the recruitment of qualified annotators in other challenging annotation tasks"
              ],
              "Secondary Object": [
                "<NONE>"
              ]
            },
            "Context": [
              "<NONE>"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        }
      ]
    }
  ]
}