{
  "papers": [
    {
      "paper_code": "ACL_23_P_829",
      "abstract": "Adaptive inference is a simple method for reducing inference costs. The method works by maintaining multiple classifiers of different capacities, and allocating resources to each test instance according to its difficulty. In this work, we compare the two main approaches for adaptive inference, Early-Exit and Multi-Model, when training data is limited. First, we observe that for models with the same architecture and size, individual Multi-Model classifiers outperform their Early-Exit counterparts by an average of 2.3%. We show that this gap is caused by Early-Exit classifiers sharing model parameters during training, resulting in conflicting gradient updates of model weights. We find that despite this gap, Early-Exit still provides a better speed-accuracy trade-off due to the overhead of the Multi-Model approach. To address these issues, we propose SWEET (Separating Weights for Early-Exit Transformers) an Early-Exit fine-tuning method that assigns each classifier its own set of unique model weights, not updated by other classifiers. We compare SWEET’s speed-accuracy curve to standard Early-Exit and Multi-Model baselines and find that it outperforms both methods at fast speeds while maintaining comparable scores to Early- Exit at slow speeds. Moreover, SWEET individual classifiers outperform Early-Exit ones by 1.1% on average. SWEET enjoys the benefits of both methods, paving the way for further reduction of inference costs in NLP.",
      "events": [
        {
          "Background/Introduction": "",
          "Text": "Adaptive inference is a simple method for reducing inference costs. The method works by maintaining multiple classifiers of different capacities, and allocating resources to each test instance according to its difficulty.",
          "Main Action": "<NONE>",
          "Arguments": {
            "Agent": [
              "adaptive inference"
            ],
            "Object": {
              "Primary Object": [
                "reducing inference costs"
              ],
              "Secondary Object": [
                "multiple classifiers of different capacities"
              ]
            },
            "Context": [
              "simple method"
            ],
            "Purpose": [
              "none specified but implied reduction cost through resource allocation based on difficulty"
            ],
            "Method": [
              "maintaining multiple classifiers of different capacities, allocating resources to each test instance according to its difficulty"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Methods/Approach": "",
          "Text": "In this work, we compare the two main approaches for adaptive inference, Early-Exit and Multi-Model, when training data is limited. First, we observe that for models with the same architecture and size, individual Multi-Model classifiers outperform their Early-Exit counterparts by an average of 2.3%. We show that this gap is caused by Early-Exit classifiers sharing model parameters during training, resulting in conflicting gradient updates of model weights. We find that despite this gap, Early-Exit still provides a better speed-accuracy trade-off due to the overhead of the Multi-Model approach. To address these issues, we propose SWEET (Separating Weights for Early-Exit Transformers) an Early-Exit fine-tuning method that assigns each classifier its own set of unique model weights, not updated by other classifiers.",
          "Main Action": "<NONE>",
          "Arguments": {
            "Agent": [
              "we"
            ],
            "Object": {
              "Primary Object": [
                "Early-Exit",
                "Multi-Model classifiers"
              ],
              "Secondary Object": [
                "models with the same architecture and size"
              ]
            },
            "Context": [
              "compare the two main approaches for adaptive inference",
              "training data is limited"
            ],
            "Purpose": [
              "observe performance difference between methods"
            ],
            "Method": [
              "train",
              "evaluate using average percentage improvement"
            ],
            "Results": [
              "individual Multi-Model classifiers outperform their Early-Exit counterparts by an average of 2.3%",
              "this gap is caused by Early-Exit classifiers sharing model parameters during training, resulting in conflicting gradient updates of model weights",
              "despite this gap, Early-Exit still provides a better speed-accuracy trade-off due to the overhead of the Multi-Model approach"
            ],
            "Analysis": [
              "SWEET (Separating Weights for Early-Exit Transformers) an Early-Exit fine-tuning method that assigns each classifier its own set of unique model weights, not updated by other classifiers"
            ],
            "Challenge": [
              "overhead of the Multi-Model approach"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "proposes addressing the issue through SWEET method"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Results/Findings": "",
          "Text": "We compare SWEET’s speed-accuracy curve to standard Early-Exit and Multi-Model baselines and find that it outperforms both methods at fast speeds while maintaining comparable scores to Early- Exit at slow speeds. Moreover, SWEET individual classifiers outperform Early-Exit ones by 1.1% on average. SWEET enjoys the benefits of both methods, paving the way for further reduction of inference costs in NLP.",
          "Main Action": "<NONE>",
          "Arguments": {
            "Agent": [
              "SWEET"
            ],
            "Object": {
              "Primary Object": [
                "outperforms",
                "individual classifiers outperform"
              ],
              "Secondary Object": [
                "standard Early-Exit and Multi-Model baselines",
                "Early-Exit ones"
              ]
            },
            "Context": [
              "compare SWEET's speed-accuracy curve to standard Early-Exit and Multi-Model baselines"
            ],
            "Purpose": [
              "paving the way for further reduction of inference costs in NLP"
            ],
            "Method": [
              "comparing SWEET’s speed-accuracy curve to standard Early-Exit and Multi-Model baselines"
            ],
            "Results": [
              "it outperforms both methods at fast speeds",
              "maintaining comparable scores to Early-Exit at slow speeds",
              "SWEET individual classifiers outperform Early-Exit ones by 1.1% on average"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "enjoys the benefits of both methods"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        }
      ]
    },
    {
      "paper_code": "ACL_23_P_64",
      "abstract": "Recent studies have proposed unified user modeling frameworks that leverage user behavior data from various applications. Many of them benefit from utilizing users’ behavior sequences as plain texts, representing rich information in any domain or system without losing generality. Hence, a question arises: Can language modeling for user history corpus help improve recommender systems? While its versatile usability has been widely investigated in many domains, its applications to recommender systems still remain underexplored. We show that language modeling applied directly to task-specific user histories achieves excellent results on diverse recommendation tasks. Also, leveraging additional task-agnostic user histories delivers significant performance benefits. We further demonstrate that our approach can provide promising transfer learning capabilities for a broad spectrum of real-world recommender systems, even on unseen domains and services.",
      "events": [
        {
          "Background/Introduction": "",
          "Text": "Recent studies have proposed unified user modeling frameworks that leverage user behavior data from various applications. Many of them benefit from utilizing users’ behavior sequences as plain texts, representing rich information in any domain or system without losing generality. Hence, a question arises: Can language modeling for user history corpus help improve recommender systems? While its versatile usability has been widely investigated in many domains, its applications to recommender systems still remain underexplored.",
          "Main Action": "<NONE>",
          "Arguments": {
            "Agent": [
              "Recent studies"
            ],
            "Object": {
              "Primary Object": [
                "unified user modeling frameworks"
              ],
              "Secondary Object": [
                "user behavior data",
                "users' behavior sequences"
              ]
            },
            "Context": [
              "proposed",
              "leverage user behavior data from various applications",
              "representing rich information in any domain or system without losing generality"
            ],
            "Purpose": [
              "improve recommender systems"
            ],
            "Method": [
              "utilizing users' behavior sequences as plain texts"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "versatile usability has been widely investigated in many domains, its applications to recommender systems still remain underexplored"
            ],
            "Challenge": [
              "applications to recommender systems still remain underexplored"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "underexplored area for further investigation"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Results/Findings": "",
          "Text": "We show that language modeling applied directly to task-specific user histories achieves excellent results on diverse recommendation tasks. Also, leveraging additional task-agnostic user histories delivers significant performance benefits. We further demonstrate that our approach can provide promising transfer learning capabilities for a broad spectrum of real-world recommender systems, even on unseen domains and services.",
          "Main Action": "show",
          "Arguments": {
            "Agent": [
              "we"
            ],
            "Object": {
              "Primary Object": [
                "language modeling applied directly to task-specific user histories"
              ],
              "Secondary Object": [
                "diverse recommendation tasks",
                "additional task-agnostic user histories",
                "a broad spectrum of real-world recommender systems"
              ]
            },
            "Context": [
              "<NONE>"
            ],
            "Purpose": [
              "achieves excellent results"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "excellent results on diverse recommendation tasks",
              "significant performance benefits",
              "promising transfer learning capabilities"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "unseen domains and services"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "broad applicability across various domains and services"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        }
      ]
    }
  ]
}