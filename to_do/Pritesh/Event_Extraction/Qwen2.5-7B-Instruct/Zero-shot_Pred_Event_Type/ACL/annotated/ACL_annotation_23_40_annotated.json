{
  "papers": [
    {
      "paper_code": "ACL_23_P_571",
      "abstract": "Transformer encoders contextualize token representations by attending to all other tokens at each layer, leading to quadratic increase in compute effort with the input length. In practice, however, the input text of many NLP tasks can be seen as a sequence of related segments (e.g., the sequence of sentences within a passage, or the hypothesis and premise in NLI). While attending across these segments is highly beneficial for many tasks, we hypothesize that this interaction can be delayed until later encoding stages. To this end, we introduce Layer-Adjustable Interactions in Transformers (LAIT). Within LAIT, segmented inputs are first encoded independently, and then jointly. This partial two-tower architecture bridges the gap between a Dual Encoder’s ability to pre-compute representations for segments and a fully self-attentive Transformer’s capacity to model cross-segment attention. The LAIT framework effectively leverages existing pretrained Transformers and converts them into the hybrid of the two aforementioned architectures, allowing for easy and intuitive control over the performance-efficiency tradeoff. Experimenting on a wide range of NLP tasks, we find LAIT able to reduce 30-50% of the attention FLOPs on many tasks, while preserving high accuracy; in some practical settings, LAIT could reduce actual latency by orders of magnitude.",
      "events": [
        {
          "Background/Introduction": "",
          "Text": "Transformer encoders contextualize token representations by attending to all other tokens at each layer, leading to quadratic increase in compute effort with the input length. In practice, however, the input text of many NLP tasks can be seen as a sequence of related segments (e.g., the sequence of sentences within a passage, or the hypothesis and premise in NLI). While attending across these segments is highly beneficial for many tasks, we hypothesize that this interaction can be delayed until later encoding stages.",
          "Main Action": "<NONE>",
          "Arguments": {
            "Agent": [
              "we"
            ],
            "Object": {
              "Primary Object": [
                "input text of many NLP tasks"
              ],
              "Secondary Object": [
                "sequence of related segments"
              ]
            },
            "Context": [
              "Transformer encoders contextualize token representations by attending to all other tokens at each layer",
              "leading to quadratic increase in compute effort with the input length"
            ],
            "Purpose": [
              "delayed until later encoding stages"
            ],
            "Method": [
              "hypothesized"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "highly beneficial for many tasks"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Methods/Approach": "",
          "Text": "To this end, we introduce Layer-Adjustable Interactions in Transformers (LAIT). Within LAIT, segmented inputs are first encoded independently, and then jointly. This partial two-tower architecture bridges the gap between a Dual Encoder’s ability to pre-compute representations for segments and a fully self-attentive Transformer’s capacity to model cross-segment attention. The LAIT framework effectively leverages existing pretrained Transformers and converts them into the hybrid of the two aforementioned architectures, allowing for easy and intuitive control over the performance-efficiency tradeoff.",
          "Main Action": "<INTRODUCE>",
          "Arguments": {
            "Agent": [
              "we"
            ],
            "Object": {
              "Primary Object": [
                "Layer-Adjustable Interactions in Transformers (LAIT)"
              ],
              "Secondary Object": [
                "existing pretrained Transformers"
              ]
            },
            "Context": [
              "Within LAIT, segmented inputs are first encoded independently, and then jointly.",
              "This partial two-tower architecture bridges the gap between a Dual Encoder's ability to pre-compute representations for segments and a fully self-attentive Transformer's capacity to model cross-segment attention."
            ],
            "Purpose": [
              "to allow for easy and intuitive control over the performance-efficiency tradeoff"
            ],
            "Method": [
              "a partial two-tower architecture"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "allowing for easy and intuitive control over the performance-efficiency tradeoff"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Results/Findings": "",
          "Text": "Experimenting on a wide range of NLP tasks, we find LAIT able to reduce 30-50% of the attention FLOPs on many tasks, while preserving high accuracy; in some practical settings, LAIT could reduce actual latency by orders of magnitude.",
          "Main Action": "find",
          "Arguments": {
            "Agent": [
              "we"
            ],
            "Object": {
              "Primary Object": [
                "LAIT"
              ],
              "Secondary Object": [
                "reduce 30-50% of the attention FLOPs",
                "preserve high accuracy"
              ]
            },
            "Context": [
              "on a wide range of NLP tasks"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "able to reduce 30-50% of the attention FLOPs on many tasks, while preserving high accuracy",
              "could reduce actual latency by orders of magnitude"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "in some practical settings"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        }
      ]
    },
    {
      "paper_code": "ACL_23_P_196",
      "abstract": "Entailment Graphs (EGs) have been constructed based on extracted corpora as a strong and explainable form to indicate context-independent entailment relation in natural languages. However, EGs built by previous methods often suffer from severe sparsity issues, due to limited corpora available and the long-tail phenomenon of predicate distributions. In this paper, we propose a multi-stage method, Typed Predicate-Entailment Graph Generator (TP-EGG), to tackle this problem. Given several seed predicates, TP-EGG builds the graphs by generating new predicates and detecting entailment relations among them. The generative nature of TP-EGG helps us leverage the recent advances from large pretrained language models (PLMs), while avoiding the reliance on carefully prepared corpora. Experiments on benchmark datasets show that TP-EGG can generate high-quality and scale-controllable entailment graphs, achieving significant in-domain improvement over state-of-the-art EGs and boosting the performance of downstream inference tasks.",
      "events": [
        {
          "Background/Introduction": "",
          "Text": "Entailment Graphs (EGs) have been constructed based on extracted corpora as a strong and explainable form to indicate context-independent entailment relation in natural languages. However, EGs built by previous methods often suffer from severe sparsity issues, due to limited corpora available and the long-tail phenomenon of predicate distributions.",
          "Main Action": "<NONE>",
          "Arguments": {
            "Agent": [
              "Previous methods"
            ],
            "Object": {
              "Primary Object": [
                "EGs"
              ],
              "Secondary Object": [
                "corpora"
              ]
            },
            "Context": [
              "constructed based on extracted",
              "strong and explainable form to indicate context-independent entailment relation in natural languages"
            ],
            "Purpose": [
              "indicate context-independent entailment relation in natural languages"
            ],
            "Method": [
              "extracted corpora as a strong and explainable form"
            ],
            "Results": [
              "have been constructed"
            ],
            "Analysis": [
              "However, EGs built by previous methods often suffer from severe sparsity issues, due to limited corpora available and the long-tail phenomenon of predicate distributions."
            ],
            "Challenge": [
              "severe sparsity issues, due to limited corpora available and the long-tail phenomenon of predicate distributions"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Methods/Approach": "",
          "Text": "In this paper, we propose a multi-stage method, Typed Predicate-Entailment Graph Generator (TP-EGG), to tackle this problem. Given several seed predicates, TP-EGG builds the graphs by generating new predicates and detecting entailment relations among them. The generative nature of TP-EGG helps us leverage the recent advances from large pretrained language models (PLMs), while avoiding the reliance on carefully prepared corpora.",
          "Main Action": "propose",
          "Arguments": {
            "Agent": [
              "we"
            ],
            "Object": {
              "Primary Object": [
                "multi-stage method",
                "Typed Predicate-Entailment Graph Generator (TP-EGG)"
              ],
              "Secondary Object": [
                "problem"
              ]
            },
            "Context": [
              "tackle this problem"
            ],
            "Purpose": [
              "leverage the recent advances from large pretrained language models (PLMs)",
              "avoiding the reliance on carefully prepared corpora"
            ],
            "Method": [
              "builds the graphs by generating new predicates and detecting entailment relations among them",
              "generative nature of TP-EGG"
            ],
            "Results": [
              "<NONE>"
            ],
            "Analysis": [
              "<NONE>"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        },
        {
          "Results/Findings": "",
          "Text": "Experiments on benchmark datasets show that TP-EGG can generate high-quality and scale-controllable entailment graphs, achieving significant in-domain improvement over state-of-the-art EGs and boosting the performance of downstream inference tasks.",
          "Main Action": "show",
          "Arguments": {
            "Agent": [
              "Experiments"
            ],
            "Object": {
              "Primary Object": [
                "benchmark datasets"
              ],
              "Secondary Object": [
                "TP-EGG"
              ]
            },
            "Context": [
              "<NONE>"
            ],
            "Purpose": [
              "<NONE>"
            ],
            "Method": [
              "<NONE>"
            ],
            "Results": [
              "can generate high-quality and scale-controllable entailment graphs",
              "achieving significant in-domain improvement over state-of-the-art EGs"
            ],
            "Analysis": [
              "boosting the performance of downstream inference tasks"
            ],
            "Challenge": [
              "<NONE>"
            ],
            "Ethical": [
              "<NONE>"
            ],
            "Implications": [
              "<NONE>"
            ],
            "Contradictions": [
              "<NONE>"
            ]
          }
        }
      ]
    }
  ]
}